"use strict";(self.webpackChunk_finos_perspective_docs=self.webpackChunk_finos_perspective_docs||[]).push([[805],{5318:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>b});var n=t(7378);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=n.createContext({}),s=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=s(e.components);return n.createElement(p.Provider,{value:a},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(t),u=l,b=m["".concat(p,".").concat(u)]||m[u]||c[u]||r;return t?n.createElement(b,i(i({ref:a},d),{},{components:t})):n.createElement(b,i({ref:a},d))}));function b(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=u;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[m]="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8189:(e,a,t)=>{t.d(a,{Z:()=>i});var n=t(7378),l=t(8944);const r="tabItem_wHwb";function i(e){let{children:a,hidden:t,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:t},a)}},5553:(e,a,t)=>{t.d(a,{Z:()=>u});var n=t(2685),l=t(7378),r=t(8944),i=t(6457),o=t(784),p=t(9947),s=t(3457);const d="tabList_J5MA",m="tabItem_l0OV";function c(e){var a;const{lazy:t,block:i,defaultValue:c,values:u,groupId:b,className:h}=e,k=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=u??k.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),v=(0,o.l)(y,((e,a)=>e.value===a.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===c?c:c??(null==(a=k.find((e=>e.props.default)))?void 0:a.props.value)??k[0].props.value;if(null!==N&&!y.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:T}=(0,p.U)(),[g,w]=(0,l.useState)(N),x=[],{blockElementScrollPositionUntilNextRender:C}=(0,s.o5)();if(null!=b){const e=f[b];null!=e&&e!==g&&y.some((a=>a.value===e))&&w(e)}const j=e=>{const a=e.currentTarget,t=x.indexOf(a),n=y[t].value;n!==g&&(C(a),w(n),null!=b&&T(b,String(n)))},Z=e=>{var a;let t=null;switch(e.key){case"Enter":j(e);break;case"ArrowRight":{const a=x.indexOf(e.currentTarget)+1;t=x[a]??x[0];break}case"ArrowLeft":{const a=x.indexOf(e.currentTarget)-1;t=x[a]??x[x.length-1];break}}null==(a=t)||a.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",d)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},h)},y.map((e=>{let{value:a,label:t,attributes:i}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:g===a?0:-1,"aria-selected":g===a,key:a,ref:e=>x.push(e),onKeyDown:Z,onClick:j},i,{className:(0,r.Z)("tabs__item",m,null==i?void 0:i.className,{"tabs__item--active":g===a})}),t??a)}))),t?(0,l.cloneElement)(k.filter((e=>e.props.value===g))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},k.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==g})))))}function u(e){const a=(0,i.Z)();return l.createElement(c,(0,n.Z)({key:String(a)},e))}},4789:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var n=t(2685),l=(t(7378),t(5318)),r=t(5553),i=t(8189);const o={id:"table",title:"Table"},p=void 0,s={unversionedId:"table",id:"table",title:"Table",description:"The Table is Perspective's columnar data frame, analogous to a Pandas",source:"@site/docs/table.md",sourceDirName:".",slug:"/table",permalink:"/docs/table",draft:!1,tags:[],version:"current",frontMatter:{id:"table",title:"Table"},sidebar:"tutorialSidebar",previous:{title:"Python User Guide",permalink:"/docs/python"},next:{title:"View",permalink:"/docs/view"}},d={},m=[{value:"Schema and Types",id:"schema-and-types",level:2},{value:"Index and Limit",id:"index-and-limit",level:2},{value:"Update and Remove",id:"update-and-remove",level:2}],c={toc:m};function u(e){let{components:a,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," is Perspective's columnar data frame, analogous to a Pandas\n",(0,l.kt)("inlineCode",{parentName:"p"},"DataFrame")," or Apache Arrow. ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," supports appending data, in-place updates,\nremoval by index, and notifications on update."),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," contains columns, each of which have a unique name, are strongly and\nconsistently typed, and contains rows of data conforming to the column's type.\nEach column in a ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," must have the same number of rows, though not every row\nmust contain data; null-values are used to indicate missing values in the\ndataset."),(0,l.kt)("p",null,"The columns of a ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," are ",(0,l.kt)("em",{parentName:"p"},"immutable after creation"),", which means their names\nand data types cannot be changed after the ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," has been created. Columns\ncannot be added or deleted after creation, but a ",(0,l.kt)("inlineCode",{parentName:"p"},"View")," can be used to select an\narbitrary set of columns from the ",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'var data = [\n    { x: 1, y: "a", z: true },\n    { x: 2, y: "b", z: false },\n    { x: 3, y: "c", z: true },\n    { x: 4, y: "d", z: false },\n];\n\nconst table1 = await worker.table(data);\n'))),(0,l.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'data = [\n    {"x": 1, "y": "a", "z": True},\n    {"x": 2, "y": "b", "z": False},\n    {"x": 3, "y": "c", "z": True},\n    {"x": 4, "y": "d", "z": False}\n];\n\ntable1 = perspective.Table(data)\n')))),(0,l.kt)("h2",{id:"schema-and-types"},"Schema and Types"),(0,l.kt)("p",null,"The mapping of a ",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),"'s column names to data types is referred to as a\n",(0,l.kt)("inlineCode",{parentName:"p"},"schema"),". Each column has a unique name and a single data type, and data types\nare expressed with a common vocabulary of across all supported host languages.\nIn Python, you may alternatively use native types over their String\ncounterparts:"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'var schema = {\n    x: "integer",\n    y: "string",\n    z: "boolean",\n};\n\nconst table2 = await worker.table(schema);\n'))),(0,l.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import date, datetime\n\nschema = {\n    "a": int,\n    "b": float,\n    "c": date,\n    "d": datetime,\n    "e": bool,\n    "f": str\n}\n\ntable2 = perspective.Table(schema)\n')))),(0,l.kt)("p",null,"When passing data directly to the ",(0,l.kt)("inlineCode",{parentName:"p"},"table()")," constructor, the type of each column\nis inferred automatically. In some cases, the inference algorithm may not return\nexactly what you'd like. For example, a column may be interpreted as a\n",(0,l.kt)("inlineCode",{parentName:"p"},"datetime")," when you intended it to be a ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", or a column may have no values\nat all (yet), as it will be updated with values from a real-time data source\nlater on. In these cases, create a ",(0,l.kt)("inlineCode",{parentName:"p"},"table()")," with a ",(0,l.kt)("em",{parentName:"p"},"schema"),"."),(0,l.kt)("p",null,"Once the ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," has been created with a schema, further ",(0,l.kt)("inlineCode",{parentName:"p"},"update()")," calls will\nconvert data types to conform with the schema; a column that is typed as a\n",(0,l.kt)("inlineCode",{parentName:"p"},"datetime"),", for example, can be updated with ",(0,l.kt)("inlineCode",{parentName:"p"},"date")," objects, ",(0,l.kt)("inlineCode",{parentName:"p"},"datetime")," objects,\n",(0,l.kt)("inlineCode",{parentName:"p"},"pandas.Timestamp"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"numpy.datetime64"),", and even valid millisecond/seconds from\nepoch timestamps. Similarly, updating string columns with integer data will\ncause a cast to string, updating floats with ints will cast to float, and etc.\nType conversion can also leverage Python converters, such as ",(0,l.kt)("inlineCode",{parentName:"p"},"__int__"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"__float__"),", etc."),(0,l.kt)("h2",{id:"index-and-limit"},"Index and Limit"),(0,l.kt)("p",null,"Initializing a ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," with an ",(0,l.kt)("inlineCode",{parentName:"p"},"index")," tells Perspective to treat a column as\nthe primary key, allowing in-place updates of rows. Only a single column (of any\ntype) can be used as an ",(0,l.kt)("inlineCode",{parentName:"p"},"index"),". Indexed ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," instances allow:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In-place ",(0,l.kt)("em",{parentName:"li"},"updates")," whenever a new row shares an ",(0,l.kt)("inlineCode",{parentName:"li"},"index")," values with an\nexisting row"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Partial updates")," when such a row leaves some column values ",(0,l.kt)("inlineCode",{parentName:"li"},"undefined")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Removes")," to delete a row by ",(0,l.kt)("inlineCode",{parentName:"li"},"index"),".")),(0,l.kt)("p",null,"To create an indexed ",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),", provide the ",(0,l.kt)("inlineCode",{parentName:"p"},"index")," property with a string column\nname to be used as an index:"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const indexed_table = await perspective.table(data, { index: "a" });\n'))),(0,l.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'indexed_table = perspective.Table(data, index="a");\n')))),(0,l.kt)("p",null,"Initializing a ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"limit")," sets the total number of rows the ",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),"\nis allowed to have. When the ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," is updated, and the resulting size of the\n",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," would exceed its ",(0,l.kt)("inlineCode",{parentName:"p"},"limit"),", rows that exceed ",(0,l.kt)("inlineCode",{parentName:"p"},"limit")," overwrite the oldest\nrows in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),". To create a ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"limit"),", provide the ",(0,l.kt)("inlineCode",{parentName:"p"},"limit"),"\nproperty with an integer indicating the maximum rows:"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const limit_table = await perspective.table(data, { limit: 1000 });\n"))),(0,l.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"limit_table = perspective.Table(data, limit=1000);\n")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"limit")," cannot be used in conjunction with ",(0,l.kt)("inlineCode",{parentName:"p"},"index"),".")),(0,l.kt)("h2",{id:"update-and-remove"},"Update and Remove"),(0,l.kt)("p",null,"Once a ",(0,l.kt)("inlineCode",{parentName:"p"},"Table")," has been created, it can be updated with new data conforming to\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),"'s ",(0,l.kt)("inlineCode",{parentName:"p"},"schema"),". The dataset used for ",(0,l.kt)("inlineCode",{parentName:"p"},"update()")," must conform with the\nformats supported by Perspective."),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'const schema = {\n    a: "integer",\n    b: "float",\n};\n\nconst table = await perspective.table(schema);\ntable.update(new_data);\n'))),(0,l.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'schema = {"a": int, "b": float}\n\ntable = perspective.Table(schema)\ntable.update(new_data)\n')))),(0,l.kt)("p",null,"Without an ",(0,l.kt)("inlineCode",{parentName:"p"},"index")," set, calls to ",(0,l.kt)("inlineCode",{parentName:"p"},"update()")," ",(0,l.kt)("em",{parentName:"p"},"append")," new data to the end of the\n",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),". Otherwise, Perspective allows\n",(0,l.kt)("a",{parentName:"p",href:"#index-and-limit"},(0,l.kt)("em",{parentName:"a"},"partial updates")," (in-place)")," using the ",(0,l.kt)("inlineCode",{parentName:"p"},"index")," to determine\nwhich rows to update:"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'indexed_table.update({ id: [1, 4], name: ["x", "y"] });\n'))),(0,l.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'indexed_table.update({"id": [1, 4], "name": ["x", "y"]})\n')))),(0,l.kt)("p",null,"Any value on a ",(0,l.kt)("inlineCode",{parentName:"p"},"table()")," can be unset using the value ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," (Javascript) or\n",(0,l.kt)("inlineCode",{parentName:"p"},"None")," (Python). Values may be unset on construction, as any ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," in the\ndataset will be treated as an unset value, and can be explicitly unset via\n",(0,l.kt)("inlineCode",{parentName:"p"},"update()")," on a ",(0,l.kt)("inlineCode",{parentName:"p"},"table()")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"index")," applied. ",(0,l.kt)("inlineCode",{parentName:"p"},"update()")," calls do not need\nvalues for ",(0,l.kt)("em",{parentName:"p"},"all columns")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"table()")," schema; Missing keys (or keys with\nvalues set to ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," in Javascript), will be omitted from ",(0,l.kt)("inlineCode",{parentName:"p"},"table()"),"s with\n",(0,l.kt)("inlineCode",{parentName:"p"},"index")," set, and become ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"table.update([{ x: 3, y: null }]); // `z` missing\n"))),(0,l.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'table.update([{"x": 3, "y": None}]) // `z` missing\n')))),(0,l.kt)("p",null,"Rows can also be removed from an indexed ",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),", with an array of primary keys:"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"indexed_table.remove([1, 4]);\n"))),(0,l.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"indexed_table.remove([1, 4])\n")))),(0,l.kt)("p",null,"Calling ",(0,l.kt)("inlineCode",{parentName:"p"},"clear()")," will remove all data from the underlying ",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),". Calling\n",(0,l.kt)("inlineCode",{parentName:"p"},"replace(data)")," with new data will clear the ",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),", and update it with a new\ndataset that conforms to Perspective's data types and the existing schema on the\n",(0,l.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"table.clear();\ntable.replace(json);\n"))),(0,l.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"table.clear()\ntable.replace(df2)\n")))))}u.isMDXComponent=!0}}]);