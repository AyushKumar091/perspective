(self.webpackChunk_finos_perspective_docs=self.webpackChunk_finos_perspective_docs||[]).push([[845],{8226:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>a});var s=i(6106),r=i(9252);const t={id:"expressions",title:"Expression Columns"},o=void 0,l={id:"expressions",title:"Expression Columns",description:'{"#newcolumnhighlight perspective-viewer {--column-add--border:2px solid red}"}',source:"@site/docs/expressions.md",sourceDirName:".",slug:"/expressions",permalink:"/docs/expressions",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"expressions",title:"Expression Columns"},sidebar:"tutorialSidebar",previous:{title:"Python User Guide",permalink:"/docs/python"},next:{title:"Data Binding",permalink:"/docs/server"}},c={},a=[{value:"UI",id:"ui",level:2},{value:"Perspective Extensions to ExprTK",id:"perspective-extensions-to-exprtk",level:2},{value:"Static Typing",id:"static-typing",level:4},{value:"Expression Column Name",id:"expression-column-name",level:4},{value:"Referencing <code>Table()</code> Columns",id:"referencing-table-columns",level:4},{value:"String Literals",id:"string-literals",level:4},{value:"Extended Library",id:"extended-library",level:4},{value:"Examples",id:"examples",level:2},{value:"Casting",id:"casting",level:4},{value:"Variables",id:"variables",level:4},{value:"Conditionals",id:"conditionals",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("style",{children:"#new_column_highlight perspective-viewer {--column-add--border:2px solid red}"}),"\n",(0,s.jsxs)(n.p,{children:["Perspective supports ",(0,s.jsx)(n.em,{children:"expression columns"}),", which are virtual columns calculated\nas part of the ",(0,s.jsx)(n.code,{children:"View"}),", optionally using values from its underlying ",(0,s.jsx)(n.code,{children:"Table"}),"'s\ncolumns. Such expression columns are defined in Perspective's expression\nlanguage, an extended version of\n",(0,s.jsx)(n.a,{href:"https://github.com/ArashPartow/exprtk",children:"ExprTK"}),", which is itself quite similar\n(in design and features) to expressions in Excel."]}),"\n",(0,s.jsx)(n.h2,{id:"ui",children:"UI"}),"\n",(0,s.jsxs)(n.p,{children:["Expression columns can be created in ",(0,s.jsx)(n.code,{children:"<perspective-viewer>"}),' by clicking the "New\nColumn" button at the bottom of the column list (in ',(0,s.jsx)("span",{style:{color:"red"},children:"red"})," below), or via the API by adding the expression\nto the ",(0,s.jsx)(n.code,{children:"expressions"})," config key when calling ",(0,s.jsx)(n.code,{children:"restore()"}),"."]}),"\n",(0,s.jsx)("div",{id:"new_column_highlight",children:(0,s.jsx)("perspective-viewer",{})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)(n.p,{children:['By default, such expression columns are not "used", and will appear above the\n',(0,s.jsx)(n.code,{children:"Table"}),"'s other deselected columns in the column list, with an additional set of\nbuttons for:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Editing"})," the column's expression. Doing so will update the definitions of\n",(0,s.jsx)(n.em,{children:"all"})," usage of the expression column."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Deleting"})," the column. Clicking ",(0,s.jsx)(n.code,{children:"Reset"})," (or calling the ",(0,s.jsx)(n.code,{children:"reset()"})," method)\nwill not delete expressions unless the ",(0,s.jsx)(n.code,{children:"Shift"})," key is held (or ",(0,s.jsx)(n.code,{children:"true"}),"\nparameter supplied, respectively). This button only appears if the\nexpression column i unused."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:['To use the column, just drag/select the column as you would a normal column,\ne.g. as a "Filter", "Group By", etc. Expression columns cannot be edited or\nupdated (as they exist on the ',(0,s.jsx)(n.code,{children:"View()"})," and are generated from the ",(0,s.jsx)(n.code,{children:"Table()"}),"'s\n",(0,s.jsx)(n.em,{children:"real"})," columns). However, they will automatically update whenever their\ndependent columns update."]}),"\n",(0,s.jsx)(n.h2,{id:"perspective-extensions-to-exprtk",children:"Perspective Extensions to ExprTK"}),"\n",(0,s.jsxs)(n.p,{children:["ExprTK has its own\n",(0,s.jsx)(n.a,{href:"http://www.partow.net/programming/exprtk/",children:"excellent documentation"})," which\ncovers the core langauge in depth, which is an excellent place to start in\nlearning the basics. In addition to these features, Perspective adds a few of\nits own custom extensions and syntax."]}),"\n",(0,s.jsx)(n.h4,{id:"static-typing",children:"Static Typing"}),"\n",(0,s.jsxs)(n.p,{children:["In addition to ",(0,s.jsx)(n.code,{children:"float"})," values which ExprTK supports natively, Perspective's\nexpression language also supports Perspective's other types ",(0,s.jsx)(n.code,{children:"date"}),", ",(0,s.jsx)(n.code,{children:"datetime"}),",\n",(0,s.jsx)(n.code,{children:"integer"}),", ",(0,s.jsx)(n.code,{children:"boolean"}),"; as well as rudimentary type-checking, which will report an\n",(0,s.jsx)("span",{children:"error"})," when the values/columns supplied as arguments cannot be\nresolved to the expected type, e.g. ",(0,s.jsx)(n.code,{children:"length(x)"})," expects an argument ",(0,s.jsx)(n.code,{children:"x"})," of type\n",(0,s.jsx)(n.code,{children:"string"})," and is not a valid expression for an ",(0,s.jsx)(n.code,{children:"x"})," of another type. Perspective\nsupplies a set of ",(0,s.jsx)(n.em,{children:"cast"})," functions for converting between types where possible\ne.g. ",(0,s.jsx)(n.code,{children:"string(x)"})," to cast a variable ",(0,s.jsx)(n.code,{children:"x"})," to a ",(0,s.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"expression-column-name",children:"Expression Column Name"}),"\n",(0,s.jsxs)(n.p,{children:["Expressions can be ",(0,s.jsx)(n.em,{children:"named"})," by providing a comment as the first line of the\nexpression. This name will be used in the ",(0,s.jsx)(n.code,{children:"<perspective-viewer>"})," UI when\nreferring to the column, but will also be used in the API when specifying e.g.\n",(0,s.jsx)(n.code,{children:"group_by"})," or ",(0,s.jsx)(n.code,{children:"order_by"})," fields. When creating a new column via\n",(0,s.jsx)(n.code,{children:"<oerspective-viewer>"}),"'s expression editor, new columns will get a default name\n(which you may delete or change):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"// New Column 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Without such a comment, an expression will show up in the ",(0,s.jsx)(n.code,{children:"<perspective-viewer>"}),"\nAPI and UI as itself (clipped to a reasonable length for the latter)."]}),"\n",(0,s.jsxs)(n.h4,{id:"referencing-table-columns",children:["Referencing ",(0,s.jsx)(n.code,{children:"Table()"})," Columns"]}),"\n",(0,s.jsxs)(n.p,{children:["Columns from the ",(0,s.jsx)(n.code,{children:"Table()"})," can be referenced in an expression with ",(0,s.jsx)(n.em,{children:"double\nquotes"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Expected Sales\n("Sales" * 10) + "Profit"\n'})}),"\n",(0,s.jsx)("div",{children:(0,s.jsx)("perspective-viewer",{columns:'["Sales", "Profit", "Expected Sales"]',expressions:'{"Expected Sales": "(\\"Sales\\" * 10) + \\"Profit\\""}'})}),"\n",(0,s.jsx)(n.h4,{id:"string-literals",children:"String Literals"}),"\n",(0,s.jsxs)(n.p,{children:["In contrast to standard ExprTK, string literals are declared with ",(0,s.jsx)(n.em,{children:"single\nquotes"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// Profitable\nif (\"Profit\" > 0) {\n  'Stonks'\n} else {\n  'Not Stonks'\n}\n"})}),"\n",(0,s.jsx)("div",{children:(0,s.jsx)("perspective-viewer",{columns:'["Profit","Profitable"]',expressions:'{"Profitable": "if (\\"Profit\\" > 0) { \'Stonks\' } else { \'Not Stonks\' }"}'})}),"\n",(0,s.jsx)(n.h4,{id:"extended-library",children:"Extended Library"}),"\n",(0,s.jsxs)(n.p,{children:["Perspective adds many of its own functions in addition to ",(0,s.jsx)(n.code,{children:"ExprTK"}),"'s standard\nones, including common functions for ",(0,s.jsx)(n.code,{children:"datetime"})," and ",(0,s.jsx)(n.code,{children:"string"})," types such as\n",(0,s.jsx)(n.code,{children:"substring()"}),", ",(0,s.jsx)(n.code,{children:"bucket()"}),", ",(0,s.jsx)(n.code,{children:"day_of_week()"}),", etc. A full list of available\nfunctions is available in the\n",(0,s.jsx)(n.a,{href:"../obj/perspective-viewer-exprtk",children:"Expression Columns API"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h4,{id:"casting",children:"Casting"}),"\n",(0,s.jsxs)(n.p,{children:["Just ",(0,s.jsx)(n.code,{children:"2"}),", as an ",(0,s.jsx)(n.code,{children:"integer"})," (numeric literals currently default to ",(0,s.jsx)(n.code,{children:"float"})," unless\ncast)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"integer(2)\n"})}),"\n",(0,s.jsx)("div",{children:(0,s.jsx)("perspective-viewer",{columns:'["integer(2)"]',expressions:'["integer(2)"]'})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h4,{id:"variables",children:"Variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// My Column Name\nvar incrementedBy200 := "Sales" + 200;\nvar half := incrementedBy200 / 2;\nhalf\n'})}),"\n",(0,s.jsx)("div",{children:(0,s.jsx)("perspective-viewer",{columns:'["Sales", "My Column Name"]',expressions:'{"My Column Name": "var incrementedBy200 := \\"Sales\\" + 200;\\nvar half := incrementedBy200 / 2;\\nhalf"}'})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Complex Expression\nvar upperCustomer := upper("Customer Name");\nvar separator := concat(upperCustomer, \' | \');\nvar profitRatio := floor(percent_of("Profit", "Sales")); // Remove trailing decimal.\nvar combined := concat(separator, string(profitRatio));\nvar percentDisplay := concat(combined, \'%\');\npercentDisplay\n'})}),"\n",(0,s.jsx)("div",{children:(0,s.jsx)("perspective-viewer",{columns:'["Complex Expression", "Customer Name", "Sales", "Profit"]',expressions:'{"Complex Expression": "var upperCustomer := upper(\\"Customer Name\\");\\nvar separator := concat(upperCustomer, \' | \');\\nvar profitRatio := floor(percent_of(\\"Profit\\", \\"Sales\\")); // Remove trailing decimal.\\nvar combined := concat(separator, string(profitRatio));\\nvar percentDisplay := concat(combined, \'%\');\\npercentDisplay"}'})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h4,{id:"conditionals",children:"Conditionals"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Conditional\nvar priceAdjustmentDate := date(2016, 6, 18);\nvar finalPrice := "Sales" - "Discount";\nvar additionalModifier := 0;\n\nif("Order Date" > priceAdjustmentDate) {\n  finalPrice -= 5;\n  additionalModifier -= 2;\n}\nelse\n  finalPrice += 5;\n\nfinalPrice + additionalModifier\n'})}),"\n",(0,s.jsx)("div",{children:(0,s.jsx)("perspective-viewer",{columns:'["Conditional"]',expressions:'{"Conditional": "var priceAdjustmentDate := date(2016, 6, 18);\\nvar finalPrice := \\"Sales\\" - \\"Discount\\";\\nvar additionalModifier := 0;\\n\\nif(\\"Order Date\\" > priceAdjustmentDate) {\\n  finalPrice -= 5;\\n  additionalModifier -= 2;\\n}\\nelse\\n  finalPrice += 5;\\n\\nfinalPrice + additionalModifier"}'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},9252:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(7378);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);